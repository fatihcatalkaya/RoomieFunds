// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetData, GetApiAccountData, GetApiAccountResponse, PostApiAccountData, PostApiAccountResponse, DeleteApiAccountByAccountIdData, DeleteApiAccountByAccountIdResponse, GetApiAccountByAccountIdData, GetApiAccountByAccountIdResponse, PatchApiAccountByAccountIdData, PatchApiAccountByAccountIdResponse, GetApiFlurbeitragData, GetApiFlurbeitragResponse, PutApiFlurbeitragData, PutApiFlurbeitragResponse, GetApiFlurkontoData, GetApiFlurkontoResponse, PutApiFlurkontoData, PutApiFlurkontoResponse, GetApiLogData, GetApiLogResponse, GetApiPersonData, GetApiPersonResponse, PostApiPersonData, PostApiPersonResponse, DeleteApiPersonByPersonIdData, DeleteApiPersonByPersonIdResponse, GetApiPersonByPersonIdData, GetApiPersonByPersonIdResponse, PatchApiPersonByPersonIdData, PatchApiPersonByPersonIdResponse, GetApiProductData, GetApiProductResponse, PostApiProductData, PostApiProductResponse, GetApiProductTallylistData, GetApiProductTallylistResponse, DeleteApiProductByProductIdData, DeleteApiProductByProductIdResponse, GetApiProductByProductIdData, GetApiProductByProductIdResponse, PatchApiProductByProductIdData, PatchApiProductByProductIdResponse, GetApiRecurringTransactionData, GetApiRecurringTransactionResponse, PostApiRecurringTransactionData, PostApiRecurringTransactionResponse, DeleteApiRecurringTransactionByRecurringTransactionIdData, DeleteApiRecurringTransactionByRecurringTransactionIdResponse, GetApiRecurringTransactionByRecurringTransactionIdData, GetApiRecurringTransactionByRecurringTransactionIdResponse, PatchApiRecurringTransactionByRecurringTransactionIdData, PatchApiRecurringTransactionByRecurringTransactionIdResponse, GetApiTestData, GetApiTestResponse, PostApiTransactionData, PostApiTransactionResponse, GetApiTransactionAccountByAccountIdData, GetApiTransactionAccountByAccountIdResponse, DeleteApiTransactionByTransactionIdData, DeleteApiTransactionByTransactionIdResponse, GetApiTransactionByTransactionIdData, GetApiTransactionByTransactionIdResponse, PatchApiTransactionByTransactionIdData, PatchApiTransactionByTransactionIdResponse, GetByFileNameData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Frontend Root
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Get Accounts
 */
export const getApiAccount = <ThrowOnError extends boolean = false>(options?: Options<GetApiAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account',
        ...options
    });
};

/**
 * Create Account
 */
export const postApiAccount = <ThrowOnError extends boolean = false>(options: Options<PostApiAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Account
 */
export const deleteApiAccountByAccountId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiAccountByAccountIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiAccountByAccountIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/{accountId}',
        ...options
    });
};

/**
 * Get Account
 */
export const getApiAccountByAccountId = <ThrowOnError extends boolean = false>(options: Options<GetApiAccountByAccountIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiAccountByAccountIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/{accountId}',
        ...options
    });
};

/**
 * Patch Account
 */
export const patchApiAccountByAccountId = <ThrowOnError extends boolean = false>(options: Options<PatchApiAccountByAccountIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiAccountByAccountIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/{accountId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Flurbeitrag
 */
export const getApiFlurbeitrag = <ThrowOnError extends boolean = false>(options?: Options<GetApiFlurbeitragData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiFlurbeitragResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/flurbeitrag',
        ...options
    });
};

/**
 * Set Flurbeitrag
 */
export const putApiFlurbeitrag = <ThrowOnError extends boolean = false>(options: Options<PutApiFlurbeitragData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiFlurbeitragResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/flurbeitrag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Flurkonto
 */
export const getApiFlurkonto = <ThrowOnError extends boolean = false>(options?: Options<GetApiFlurkontoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiFlurkontoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/flurkonto',
        ...options
    });
};

/**
 * Set Flurkonto
 */
export const putApiFlurkonto = <ThrowOnError extends boolean = false>(options: Options<PutApiFlurkontoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiFlurkontoResponse, unknown, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/flurkonto',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Get Log
 */
export const getApiLog = <ThrowOnError extends boolean = false>(options?: Options<GetApiLogData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiLogResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/log',
        ...options
    });
};

/**
 * Get Persons
 */
export const getApiPerson = <ThrowOnError extends boolean = false>(options?: Options<GetApiPersonData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiPersonResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person',
        ...options
    });
};

/**
 * Create Person
 */
export const postApiPerson = <ThrowOnError extends boolean = false>(options: Options<PostApiPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiPersonResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Person
 */
export const deleteApiPersonByPersonId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiPersonByPersonIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiPersonByPersonIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{personId}',
        ...options
    });
};

/**
 * Get Person
 */
export const getApiPersonByPersonId = <ThrowOnError extends boolean = false>(options: Options<GetApiPersonByPersonIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPersonByPersonIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{personId}',
        ...options
    });
};

/**
 * Patch Person
 */
export const patchApiPersonByPersonId = <ThrowOnError extends boolean = false>(options: Options<PatchApiPersonByPersonIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiPersonByPersonIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{personId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Products
 */
export const getApiProduct = <ThrowOnError extends boolean = false>(options?: Options<GetApiProductData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product',
        ...options
    });
};

/**
 * Create Product
 */
export const postApiProduct = <ThrowOnError extends boolean = false>(options: Options<PostApiProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Tally List
 */
export const getApiProductTallylist = <ThrowOnError extends boolean = false>(options?: Options<GetApiProductTallylistData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiProductTallylistResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product/tallylist',
        ...options
    });
};

/**
 * Delete Product
 */
export const deleteApiProductByProductId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiProductByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiProductByProductIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product/{productId}',
        ...options
    });
};

/**
 * Get Product
 */
export const getApiProductByProductId = <ThrowOnError extends boolean = false>(options: Options<GetApiProductByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProductByProductIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product/{productId}',
        ...options
    });
};

/**
 * Patch Product
 */
export const patchApiProductByProductId = <ThrowOnError extends boolean = false>(options: Options<PatchApiProductByProductIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiProductByProductIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product/{productId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Recurring Transactions
 */
export const getApiRecurringTransaction = <ThrowOnError extends boolean = false>(options?: Options<GetApiRecurringTransactionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiRecurringTransactionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recurring-transaction',
        ...options
    });
};

/**
 * Create Recurring Transaction
 */
export const postApiRecurringTransaction = <ThrowOnError extends boolean = false>(options: Options<PostApiRecurringTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiRecurringTransactionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recurring-transaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Recurring Transaction
 */
export const deleteApiRecurringTransactionByRecurringTransactionId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiRecurringTransactionByRecurringTransactionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiRecurringTransactionByRecurringTransactionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recurring-transaction/{recurringTransactionId}',
        ...options
    });
};

/**
 * Get Recurring Transaction
 */
export const getApiRecurringTransactionByRecurringTransactionId = <ThrowOnError extends boolean = false>(options: Options<GetApiRecurringTransactionByRecurringTransactionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiRecurringTransactionByRecurringTransactionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recurring-transaction/{recurringTransactionId}',
        ...options
    });
};

/**
 * Update Recurring Transaction
 */
export const patchApiRecurringTransactionByRecurringTransactionId = <ThrowOnError extends boolean = false>(options: Options<PatchApiRecurringTransactionByRecurringTransactionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiRecurringTransactionByRecurringTransactionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/recurring-transaction/{recurringTransactionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get ASPS Ps
 */
export const getApiTest = <ThrowOnError extends boolean = false>(options?: Options<GetApiTestData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiTestResponse, unknown, ThrowOnError>({
        url: '/api/test',
        ...options
    });
};

/**
 * Create Transaction
 */
export const postApiTransaction = <ThrowOnError extends boolean = false>(options: Options<PostApiTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTransactionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Transaction For Account
 */
export const getApiTransactionAccountByAccountId = <ThrowOnError extends boolean = false>(options: Options<GetApiTransactionAccountByAccountIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTransactionAccountByAccountIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction/account/{accountId}',
        ...options
    });
};

/**
 * Delete Transaction
 */
export const deleteApiTransactionByTransactionId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiTransactionByTransactionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiTransactionByTransactionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction/{transactionId}',
        ...options
    });
};

/**
 * Get Transaction
 */
export const getApiTransactionByTransactionId = <ThrowOnError extends boolean = false>(options: Options<GetApiTransactionByTransactionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTransactionByTransactionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction/{transactionId}',
        ...options
    });
};

/**
 * Update Transaction
 */
export const patchApiTransactionByTransactionId = <ThrowOnError extends boolean = false>(options: Options<PatchApiTransactionByTransactionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiTransactionByTransactionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/transaction/{transactionId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Frontend Static File
 */
export const getByFileName = <ThrowOnError extends boolean = false>(options: Options<GetByFileNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/{fileName}',
        ...options
    });
};