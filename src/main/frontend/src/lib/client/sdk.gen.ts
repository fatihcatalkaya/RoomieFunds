// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetData, GetApiAccountData, GetApiAccountResponse, PostApiAccountData, PostApiAccountResponse, DeleteApiAccountByAccountIdDData, DeleteApiAccountByAccountIdDResponse, GetApiAccountByAccountIdDData, GetApiAccountByAccountIdDResponse, PatchApiAccountByAccountIdDData, PatchApiAccountByAccountIdDResponse, GetApiPersonData, GetApiPersonResponse, PostApiPersonData, PostApiPersonResponse, DeleteApiPersonByPersonIdDData, DeleteApiPersonByPersonIdDResponse, GetApiPersonByPersonIdDData, GetApiPersonByPersonIdDResponse, PatchApiPersonByPersonIdDData, PatchApiPersonByPersonIdDResponse, GetApiProductData, GetApiProductResponse, PostApiProductData, PostApiProductResponse, DeleteApiProductByProductIdDData, DeleteApiProductByProductIdDResponse, GetApiProductByProductIdDData, GetApiProductByProductIdDResponse, PatchApiProductByProductIdDData, PatchApiProductByProductIdDResponse, GetByFileNameData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Frontend Root
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Get Accounts
 */
export const getApiAccount = <ThrowOnError extends boolean = false>(options?: Options<GetApiAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account',
        ...options
    });
};

/**
 * Create Account
 */
export const postApiAccount = <ThrowOnError extends boolean = false>(options: Options<PostApiAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Account
 */
export const deleteApiAccountByAccountIdD = <ThrowOnError extends boolean = false>(options: Options<DeleteApiAccountByAccountIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiAccountByAccountIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/{accountId}:\\d+',
        ...options
    });
};

/**
 * Get Account
 */
export const getApiAccountByAccountIdD = <ThrowOnError extends boolean = false>(options: Options<GetApiAccountByAccountIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiAccountByAccountIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/{accountId}:\\d+',
        ...options
    });
};

/**
 * Patch Account
 */
export const patchApiAccountByAccountIdD = <ThrowOnError extends boolean = false>(options: Options<PatchApiAccountByAccountIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiAccountByAccountIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/{accountId}:\\d+',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Persons
 */
export const getApiPerson = <ThrowOnError extends boolean = false>(options?: Options<GetApiPersonData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiPersonResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person',
        ...options
    });
};

/**
 * Create Person
 */
export const postApiPerson = <ThrowOnError extends boolean = false>(options: Options<PostApiPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiPersonResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Person
 */
export const deleteApiPersonByPersonIdD = <ThrowOnError extends boolean = false>(options: Options<DeleteApiPersonByPersonIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiPersonByPersonIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{personId}:\\d+',
        ...options
    });
};

/**
 * Get Person
 */
export const getApiPersonByPersonIdD = <ThrowOnError extends boolean = false>(options: Options<GetApiPersonByPersonIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPersonByPersonIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{personId}:\\d+',
        ...options
    });
};

/**
 * Patch Person
 */
export const patchApiPersonByPersonIdD = <ThrowOnError extends boolean = false>(options: Options<PatchApiPersonByPersonIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiPersonByPersonIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/person/{personId}:\\d+',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Products
 */
export const getApiProduct = <ThrowOnError extends boolean = false>(options?: Options<GetApiProductData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product',
        ...options
    });
};

/**
 * Create Product
 */
export const postApiProduct = <ThrowOnError extends boolean = false>(options: Options<PostApiProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProductResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Product
 */
export const deleteApiProductByProductIdD = <ThrowOnError extends boolean = false>(options: Options<DeleteApiProductByProductIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiProductByProductIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product/{productId}:\\d+',
        ...options
    });
};

/**
 * Get Product
 */
export const getApiProductByProductIdD = <ThrowOnError extends boolean = false>(options: Options<GetApiProductByProductIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiProductByProductIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product/{productId}:\\d+',
        ...options
    });
};

/**
 * Patch Product
 */
export const patchApiProductByProductIdD = <ThrowOnError extends boolean = false>(options: Options<PatchApiProductByProductIdDData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiProductByProductIdDResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/product/{productId}:\\d+',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Frontend Static File
 */
export const getByFileName = <ThrowOnError extends boolean = false>(options: Options<GetByFileNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/{fileName}',
        ...options
    });
};